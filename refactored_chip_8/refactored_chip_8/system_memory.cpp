#include "system_memory.h"

namespace chip8_sprites {
	uint8_t char_sprites[]{
		 0xF0, 0x90, 0x90, 0x90, 0xF0,
		 0x20, 0x60, 0x20, 0x20, 0x70,
		 0xF0, 0x10, 0xF0, 0x80, 0xF0,
		 0xF0, 0x10, 0xF0, 0x10, 0xF0,
		 0x90, 0x90, 0xF0, 0x10, 0x10,
		 0xF0, 0x80, 0xF0, 0x10, 0xF0,
		 0xF0, 0x80, 0xF0, 0x90, 0xF0,
		 0xF0, 0x10, 0x20, 0x40, 0x40,
		 0xF0, 0x90, 0xF0, 0x90, 0xF0,
		 0xF0, 0x90, 0xF0, 0x10, 0xF0,
		 0xF0, 0x90, 0xF0, 0x90, 0x90,
		 0xE0, 0x90, 0xE0, 0x90, 0xE0,
		 0xF0, 0x80, 0x80, 0x80, 0xF0,
		 0xE0, 0x90, 0x90, 0x90, 0xE0,
		 0xF0, 0x80, 0xF0, 0x80, 0xF0,
		 0xF0, 0x80, 0xF0, 0x80, 0x80
	};
}

namespace homescreen {
	uint8_t homescreen_loop[]{
		0x63, 0x05, 0x60, 0x13, 0x61, 0x08, 0xA2,
		0x16, 0x42, 0x04, 0x12, 0x0A, 0xD0, 0x15,
		0x72, 0x01, 0xF3, 0x1E, 0x70, 0x08, 0x12,
		0x08, 0xEE, 0xAA, 0xEE, 0x8C, 0x8A,	0xEE,
		0x88, 0xEE, 0x82, 0xEE,	0xE6, 0x84, 0xE4,
		0x24, 0xE6, 0x0C, 0xE4, 0x44, 0x44, 0x0C
	};
}

namespace default_loop_program {

}

SystemMemory::SystemMemory()
{
	// Load standard sprites
	std::memcpy(memory, chip8_sprites::char_sprites, sizeof chip8_sprites::char_sprites);

	// Load the homescreen loop
	// This will cause the system to remain "on" without a rom loaded
	std::memcpy(memory+0x200, homescreen::homescreen_loop, sizeof homescreen::homescreen_loop);
}

SystemMemory::~SystemMemory()
{
}

void SystemMemory::write(uint16_t in_addr, uint16_t data)
{
	if (in_addr <= max_range && in_addr >= min_range)
		memory[in_addr] = data;
}

uint16_t SystemMemory::read(uint16_t in_addr)
{
	if (in_addr <= max_range)
		return memory[in_addr];
}

void SystemMemory::resetMemory(bool retainChars, bool loadLoop)
{
	if (retainChars) 
		std::memset(memory + 0x200, 0, sizeof(memory) - 0x200);
	else
		std::memset(memory, 0, sizeof(memory));

	if (loadLoop) {
		// Load homescreen loop
		std::memcpy(memory + 0x200, homescreen::homescreen_loop, sizeof homescreen::homescreen_loop);
	}

}

bool SystemMemory::streamLoadFromFile(const std::string& fileURL)
{
	std::ifstream file(fileURL, std::ios::binary | std::ios::ate);
	std::streamsize size = file.tellg();
	file.seekg(0, std::ios::beg);

	std::vector<char> buffer(size);

	if (size + min_range <= +max_range)
		file.read((char*)memory + min_range, size);

	file.close();

	return false;
}

void SystemMemory::force_write(uint16_t in_addr, uint16_t data)
{
	memory[in_addr] = data;
}
